@{
    var grid = Html.DevExpress().GridView<DANN.Model.AD_User>(settings =>
    {
        settings.Name = "UserGridView";
        settings.CallbackRouteValues = new { Controller = "ADUser", Action = "Load" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ADUser", Action = "AddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ADUser", Action = "Update" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ADUser", Action = "DeleteAdmin" };


        //Settings
        settings.Width = Unit.Pixel(300);
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.ButtonType = GridCommandButtonRenderMode.Button;
        settings.CommandColumn.ShowUpdateButton = true;
        settings.CommandColumn.ShowCancelButton = true;

        //settings.SettingsPager.PageSizeItemSettings.Visible = true;
        //settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "15", "25", "50" };
        //settings.SettingsPager.Visible = true;

        // settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.SettingsBehavior.AllowSelectSingleRowOnly = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        //settings.Settings.ShowTitlePanel = true;
        //settings.Settings.ShowGroupPanel = true;
        //settings.Settings.ShowFilterRow = true;
        //settings.SettingsSearchPanel.Visible = true;
        settings.SettingsBehavior.AllowDragDrop = false;
        settings.SettingsBehavior.AutoExpandAllGroups = true;

        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.KeyboardSupport = true;


        /*Events*/
        // settings.ClientSideEvents.BeginCallback = "GridBeginCallbackWithID";
        settings.ClientSideEvents.RowDblClick = "GridDoubleClickToEdit";
        settings.ClientSideEvents.FocusedRowChanged = "function(s,e) { GridFocusedChangedToSave1(s,e); GridFocusedChangedReloadControl1(s,e); }";
        settings.ClientSideEvents.ContextMenu = "ShowGridContextMenu1";
        settings.ClientSideEvents.RowClick = "function (s, e){currentControlType = 'Grid';currentControl = UserGridView ;}";
        settings.ClientSideEvents.Init = "function (s, e) { UserGridView.FocusedRowIndex = -1; }";

        /*Hiển thị thông báo sau từ server sau khi Callback*/
        settings.ClientSideEvents.EndCallback = "EndCallbackShowMessage";

        settings.CustomJSProperties = (s, e) =>
        {
            if (ViewData["Success"] != null)
            {
                e.Properties["cpMessage"] = ViewData["Success"] + "";
            }
        };
        /*--------------------------------------------------*/

        //settings.InitNewRow = (s, e) =>
        //{
        //    e.NewValues["UserValue"] = Convert.ToInt32(ViewBag.MaxUserValue) + 1;
        //};

        /*Fields*/

        settings.KeyFieldName = "User_Id";

        settings.Columns.Add(c => c.PhongBan,
                       column =>
                       {
                           column.Width = Unit.Percentage(30);
                           column.GroupIndex = 0;
                       });

        settings.Columns.Add(c => c.ChucVu,
                          column =>
                          {
                              column.Width = Unit.Percentage(30);
                          });


        settings.Columns.Add(c => c.UserName,
                            column =>
                            {
                                column.Width = Unit.Percentage(10);
                            });

        settings.Columns.Add(c => c.User_Id,
                             column =>
                             {
                                 column.Width = Unit.Pixel(0);
                                 column.Visible = false;
                                 column.EditFormSettings.Visible = DefaultBoolean.True;
                             });
        settings.Columns.Add(c => c.Password,
                         column =>
                         {
                             column.Width = Unit.Pixel(0);
                             column.Visible = false;
                             column.EditFormSettings.Visible = DefaultBoolean.True;
                         });
        settings.Columns.Add(c => c.Email,
                            column =>
                            {
                                column.Width = Unit.Pixel(0);
                                column.Visible = false;
                                column.EditFormSettings.Visible = DefaultBoolean.True;
                            });
        settings.Columns.Add(c => c.DiaChi,
                            column =>
                            {
                                column.Width = Unit.Pixel(0);
                                column.Visible = false;
                                column.EditFormSettings.Visible = DefaultBoolean.True;
                            });
        settings.Columns.Add(c => c.SoDienThoai,
                            column =>
                            {
                                column.Width = Unit.Pixel(0);
                                column.Visible = false;
                                column.EditFormSettings.Visible = DefaultBoolean.True;
                            });

        /*Edit Form*/
        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.CloseOnEscape = AutoBoolean.True;
        settings.SettingsText.PopupEditFormCaption = "Chỉnh sửa thông tin của người dùng";
        settings.SetEditFormTemplateContent(c =>
        {
            DANN.Model.AD_User editItem;
            if (c.Grid.IsNewRowEditing)
            {
                editItem = new DANN.Model.AD_User();
                Session["CanEditUserId"] = false;
            }
            else
            {
                editItem = ViewData["Item"] != null ? (DANN.Model.AD_User)ViewData["Item"] : (DANN.Model.AD_User)c.Grid.GetRow(c.VisibleIndex);
                Session["CanEditUserId"] = true;
            }
            Html.RenderPartial("_UserDetail", editItem);
            ViewContext.Writer.Write("<div style='float:right; padding:5px;'>");

            Html.DevExpress().Button(btnSettings =>
            {
                btnSettings.Name = "btnUpdate";
                btnSettings.ControlStyle.CssClass = "button";
                btnSettings.Text = "Cập nhật";
                btnSettings.Images.Image.Url = "~/Content/icon/16/Save_16x16.png";
                btnSettings.ClientSideEvents.Click = "function(s, e){ UserGridView.UpdateEdit(); }";
            }).Render();
            ViewContext.Writer.Write("  ");
            Html.DevExpress().Button(
                btnSettings =>
                {
                    btnSettings.Name = "btnCancel";
                    btnSettings.ControlStyle.CssClass = "button";
                    btnSettings.Text = "Hủy";
                    btnSettings.Images.Image.Url = "~/Content/icon/16/Close_16x16.png";
                    btnSettings.ClientSideEvents.Click = "function(s, e){ UserGridView.CancelEdit(); }";
                }).Render();
            ViewContext.Writer.Write("</div>");

        });

    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()