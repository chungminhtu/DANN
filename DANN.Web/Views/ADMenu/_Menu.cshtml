@{
    var treeList = Html.DevExpress().TreeList(settings =>
    {
        settings.Name = "MenuTreeList";

        /*Data binding*/
        settings.CallbackRouteValues = new { Controller = "ADMenu", Action = "Load" };
        settings.SettingsEditing.AddNewNodeRouteValues = new { Controller = "ADMenu", Action = "AddNew" };
        settings.SettingsEditing.UpdateNodeRouteValues = new { Controller = "ADMenu", Action = "Update" };
        settings.SettingsEditing.DeleteNodeRouteValues = new { Controller = "ADMenu", Action = "Delete" };
        settings.SettingsEditing.NodeDragDropRouteValues = new { Controller = "ADMenu", Action = "Move" };


        /*Settings*/
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "15", "25", "50" };
        settings.SettingsPager.PageSize = 25;
        
        settings.CommandColumn.Visible = false; 
        
        settings.SettingsSelection.Enabled = true;
        settings.SettingsSelection.AllowSelectAll = true;
        settings.SettingsSelection.Recursive = true;

        settings.SettingsBehavior.AllowSort = false;
        settings.SettingsBehavior.AllowDragDrop = true;
        settings.SettingsBehavior.AllowFocusedNode = true;
        settings.SettingsBehavior.FocusNodeOnLoad = false; 
        settings.SettingsBehavior.AutoExpandAllNodes = false;
        settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
        
        settings.Styles.AlternatingNode.Enabled = DevExpress.Utils.DefaultBoolean.True;
        settings.KeyboardSupport = true; 

        /*Events*/
        settings.ClientSideEvents.EndCallback = "TreeEndCallbackFocusToAddNew";
        settings.ClientSideEvents.NodeDblClick = "NodeDoubleClickToEdit";
        settings.ClientSideEvents.FocusedNodeChanged = "NodeFocusedChangedToSave";
        settings.ClientSideEvents.ContextMenu = "ShowTreeContextMenu";
        settings.ClientSideEvents.NodeClick = "function (s, e){ currentControlType = 'Tree';currentControl = MenuTreeList ; }";
       

        /*Fields*/
        settings.KeyFieldName = "Menu_Id";
        settings.ParentFieldName = "Menu_ParentId";

          
        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuText";
            column.Caption = "Tên Menu";
            column.Width = 300;
            column.AllowSort = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuAction";
            column.Caption = "Đường dẫn";
            column.AllowSort = DefaultBoolean.False;
        });

        settings.Columns.Add(column =>
        {

            column.FieldName = "MenuIcon";
            column.Caption = "Icon Menu";
            column.Width = 100;
            column.ColumnType = MVCxTreeListColumnType.ComboBox;
            column.AllowSort = DefaultBoolean.False;
            column.SetDataCellTemplateContent(c =>
            {
                Html.DevExpress().Image(image =>
                {
                    image.Name = "Image" + c.NodeKey;
                    image.ImageUrl = c.Value + "";
                    image.Width = 20;
                    image.Height = 20;
                }).GetHtml();
            });
            var properties = column.PropertiesEdit as ComboBoxProperties;

            //properties.Width = Unit.Pixel(200);
            properties.TextField = "imageName";
            properties.ValueField = "imageURL";
            properties.ImageUrlField = "imageURL";

            properties.DataSource = ViewBag.ListImages;
            properties.ShowImageInEditBox = true;
            properties.DropDownHeight = Unit.Pixel(400);
            properties.Height = Unit.Pixel(16);
            properties.ItemImage.Height = Unit.Pixel(16);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuSeparator";
            column.Caption = "Ngăn cách menu";
            column.ColumnType = MVCxTreeListColumnType.CheckBox;
        });
        
        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuSort";
            //column.Visible = false;
            column.SortIndex = 0;
            column.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
        });


        settings.InitNewNode = (s, e) =>
        {
            e.NewValues["Menu_Id"] = Convert.ToInt32(ViewBag.MaxId) + 1;
        };
         
    });
    if (ViewData["EditError"] != null)
    {
        treeList.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@treeList.Bind(Model).GetHtml()