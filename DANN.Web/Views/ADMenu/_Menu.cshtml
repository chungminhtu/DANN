@{
    var treeList = Html.DevExpress().TreeList(settings =>
    {
        settings.Name = "MenuTree";

        //Data binding
        settings.CallbackRouteValues = new { Controller = "ADMenu", Action = "Menu" };
        settings.SettingsEditing.AddNewNodeRouteValues = new { Controller = "ADMenu", Action = "MenuAddNew" };
        settings.SettingsEditing.UpdateNodeRouteValues = new { Controller = "ADMenu", Action = "MenuUpdate" };
        settings.SettingsEditing.DeleteNodeRouteValues = new { Controller = "ADMenu", Action = "MenuDelete" };
        settings.SettingsEditing.NodeDragDropRouteValues = new { Controller = "ADMenu", Action = "MenuMove" };


        //Settings
        settings.CommandColumn.Visible = false;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.NewButton.Visible = true;
        settings.CommandColumn.DeleteButton.Visible = true;
        settings.CommandColumn.EditButton.Visible = true;
        settings.SettingsPager.Visible = true;
        settings.SettingsSelection.Enabled = true;
        settings.SettingsSelection.AllowSelectAll = true;
        settings.SettingsBehavior.AllowFocusedNode = true;
        settings.SettingsBehavior.FocusNodeOnLoad = false; 
        settings.SettingsBehavior.AutoExpandAllNodes = true;
        settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
        settings.SettingsSelection.Recursive = true;
        settings.Styles.AlternatingNode.Enabled = DevExpress.Utils.DefaultBoolean.True;
        settings.KeyboardSupport = true; 

        //Events
        settings.ClientSideEvents.ContextMenu = "OnContextMenu";
        settings.ClientSideEvents.NodeDblClick = "NodeDoubleClick";
        settings.ClientSideEvents.FocusedNodeChanged = "NodeFocusedChanged";
        settings.ClientSideEvents.EndCallback = "TreeEndCallback";
        settings.ClientSideEvents.Init = "function (s, e) { ctree = MenuTree; control = MenuTree; }";


        //Columns
        settings.KeyFieldName = "Menu_Id";
        settings.ParentFieldName = "Menu_ParentId";

        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuText";
            column.Caption = "Tên Menu";
            column.Width = 300;
            column.AllowSort = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuAction";
            column.Caption = "Đường dẫn";
            column.AllowSort = DefaultBoolean.False;
        });

        settings.Columns.Add(column =>
        {

            column.FieldName = "MenuIcon";
            column.Caption = "Icon Menu";
            column.Width = 100;
            column.ColumnType = MVCxTreeListColumnType.ComboBox;
            column.AllowSort = DefaultBoolean.False;
            column.SetDataCellTemplateContent(c =>
            {
                Html.DevExpress().Image(image =>
                {
                    image.Name = "Image" + c.NodeKey;
                    image.ImageUrl = c.Value + "";
                    image.Width = 20;
                    image.Height = 20;
                }).GetHtml();
            });
            var properties = column.PropertiesEdit as ComboBoxProperties;

            //properties.Width = Unit.Pixel(200);
            properties.TextField = "imageName";
            properties.ValueField = "imageURL";
            properties.ImageUrlField = "imageURL";

            properties.DataSource = ViewBag.ListImages;
            properties.ShowImageInEditBox = true;
            properties.DropDownHeight = Unit.Pixel(400);
            properties.Height = Unit.Pixel(16);
            properties.ItemImage.Height = Unit.Pixel(16);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuSeparator";
            column.Caption = "Ngăn cách menu";
            column.ColumnType = MVCxTreeListColumnType.CheckBox;
        });
        
        settings.Columns.Add(column =>
        {
            column.FieldName = "MenuSort";
            //column.Visible = false;
            column.SortIndex = 0;
            column.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
        });

        
        //settings.InitNewNode = (s, e) =>
        //{
        //    e.NewValues["Menu_Id"] = 0;
        //    e.NewValues["MenuText"] = "abc";
             
        //};

      

    });
    if (ViewData["EditError"] != null)
    {
        treeList.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@treeList.Bind(Model).GetHtml()